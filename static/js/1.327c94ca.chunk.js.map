{"version":3,"sources":["../node_modules/framer-motion/dist/es/utils/shallow-compare.js","../node_modules/framer-motion/dist/es/render/utils/types.js","../node_modules/framer-motion/dist/es/render/utils/animation-state.js","../node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.js","../node_modules/framer-motion/dist/es/motion/features/animations.js","../node_modules/framer-motion/dist/es/events/use-dom-event.js","../node_modules/framer-motion/dist/es/gestures/utils/event-type.js","../node_modules/framer-motion/dist/es/events/event-info.js","../node_modules/framer-motion/dist/es/events/use-pointer-event.js","../node_modules/framer-motion/dist/es/events/utils.js","../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.js","../node_modules/framer-motion/dist/es/gestures/use-hover-gesture.js","../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js","../node_modules/framer-motion/dist/es/motion/features/gestures.js","../node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js","../node_modules/framer-motion/dist/es/gestures/use-focus-gesture.js","../node_modules/framer-motion/dist/es/utils/each-axis.js","../node_modules/framer-motion/dist/es/render/utils/is-draggable.js","../node_modules/framer-motion/dist/es/utils/geometry/delta-apply.js","../node_modules/framer-motion/node_modules/popmotion/dist/es/utils/is-point.js","../node_modules/framer-motion/node_modules/popmotion/dist/es/utils/is-point-3d.js","../node_modules/framer-motion/node_modules/popmotion/dist/es/utils/distance.js","../node_modules/framer-motion/dist/es/utils/geometry/delta-calc.js","../node_modules/framer-motion/dist/es/render/utils/state.js","../node_modules/framer-motion/dist/es/render/html/utils/build-projection-transform.js","../node_modules/framer-motion/dist/es/render/utils/lifecycles.js","../node_modules/framer-motion/dist/es/render/utils/projection.js","../node_modules/framer-motion/dist/es/render/utils/flat-tree.js","../node_modules/framer-motion/dist/es/motion/features/layout/utils.js","../node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js","../node_modules/framer-motion/dist/es/render/index.js","../node_modules/framer-motion/dist/es/render/utils/motion-values.js","../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js","../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js","../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js","../node_modules/framer-motion/dist/es/render/html/visual-element.js","../node_modules/framer-motion/dist/es/render/dom/projection/measure.js","../node_modules/framer-motion/dist/es/render/svg/visual-element.js","../node_modules/framer-motion/dist/es/render/dom/features-animation.js","../node_modules/framer-motion/dist/es/render/dom/create-visual-element.js"],"names":["shallowCompare","next","prev","Array","isArray","prevLength","length","i","AnimationType","variantPriorityOrder","Animate","Hover","Tap","Drag","Focus","Exit","reversePriorityOrder","__spreadArray","__read","reverse","numAnimationTypes","createAnimationState","visualElement","animate","animations","Promise","all","map","_a","animation","options","animateVisualElement","animateList","state","createTypeState","createState","allAnimatedKeys","isInitialRender","buildResolvedTypeValues","acc","definition","resolved","resolveVariant","transition","transitionEnd","target","__rest","__assign","animateChanges","changedActiveType","props","getProps","context","getVariantContext","removedKeys","Set","encounteredKeys","removedVariantIndex","Infinity","_loop_1","type","typeState","prop","propIsVariant","isVariantLabel","activeDelta","isActive","isInherited","manuallyAnimateOnMount","protectedKeys","prevProp","isAnimationControls","shouldAnimateType","isVariantLabels","variantsHaveChanged","definitionList","resolvedValues","reduce","_b","prevResolvedValues","allKeys","markToAnimate","key","delete","needsAnimating","hasOwnProperty","isKeyframesTarget","undefined","add","has","blockInitialAnimation","push","apply","size","fallbackAnimation_1","forEach","fallbackTarget","getBaseTarget","shouldAnimate","Boolean","initial","resolve","isAnimated","setActive","variantChildren","child","animationState","setAnimateFunction","makeAnimator","getState","makeRenderlessComponent","hook","useEffect","subscribe","exit","custom","usePresence","isPresent","onExitComplete","presenceContext","useContext","PresenceContext","then","addDomEvent","eventName","handler","addEventListener","removeEventListener","useDomEvent","ref","element","current","isTouchEvent","event","touches","defaultPagePoint","pageX","pageY","pointFromTouch","e","pointType","point","changedTouches","x","y","pointFromMouse","extractEventInfo","wrapHandler","shouldFilterPrimaryPointer","eventHandler","listener","isMouseEvent","MouseEvent","button","mouseEventNames","pointerdown","pointermove","pointerup","pointercancel","pointerover","pointerout","pointerenter","pointerleave","touchEventNames","getPointerEventName","name","isBrowser","window","onpointerdown","ontouchstart","onmousedown","addPointerEvent","usePointerEvent","createLock","lock","globalHorizontalLock","globalVerticalLock","isDragActive","openGestureLock","drag","openHorizontal_1","openVertical_1","getGlobalLock","createHoverEvent","callback","info","PointerEvent","pointerType","isNodeOrChild","parent","parentElement","gestureAnimations","tap","onTap","onTapStart","onTapCancel","whileTap","hasPressListeners","isPressing","useRef","cancelPointerEndListeners","removePointerEndListener","call","checkPointerEnd","onPointerUp","getInstance","onPointerCancel","pipe","useUnmountEffect","focus","whileFocus","hover","onHoverStart","onHoverEnd","whileHover","eachAxis","isDraggable","_dragX","resetAxis","axis","originAxis","min","max","scalePoint","scale","originPoint","applyPointDelta","translate","boxScale","applyAxisDelta","applyBoxDelta","box","applyAxisTransforms","final","transforms","scaleKey","originKey","axisOrigin","mix","xKeys","yKeys","applyBoxTransforms","finalBox","removePointDelta","removeAxisTransforms","origin","removeAxisDelta","isPoint","isPoint3D","distance1D","a","b","Math","abs","isNear","value","maxDistance","isNum","xDelta","yDelta","zDelta","z","sqrt","pow","distance","calcLength","updateAxisDelta","delta","source","updateBoxDelta","defaultOrigin","originX","originY","calcRelativeAxis","relative","createLayoutState","isHydrated","layout","axisBox","layoutCorrected","treeScale","deltaFinal","deltaTransform","zeroLayout","buildLayoutProjectionTransform","latestTransform","transform","rotate","rotateX","rotateY","identityProjection","buildLayoutProjectionTransformOrigin","names","updateLayoutDeltas","treePath","transformOrigin","originBox","treeLength","node","getLayoutState","getLatestValues","applyTreeDeltas","FlatTree","this","children","isDirty","prototype","addUniqueItem","remove","removeItem","sort","compareByDepth","calcRelativeOffsetAxis","setCurrentViewportBox","projectionParent","getProjectionParent","relativeOffset","setProjectionTargetAxis","rebaseProjectionTarget","treeType","build","makeTargetAnimatable","measureViewportBox","renderInstance","render","readValueFromInstance","resetTransform","restoreTransform","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","presenceId","visualState","instance","unsubscribeFromLeadVisualElement","crossfader","projectionTargetProgress","removeFromVariantTree","latestValues","renderState","lifecycles","managers","SubscriptionManager","propSubscriptions","clearAllListeners","manager","clear","updatePropListeners","on","propListener","args","_i","arguments","notify","createLifecycles","projection","isEnabled","isTargetLocked","targetFinal","leadProjection","leadLatestValues","layoutState","hasViewportBoxUpdated","values","Map","valueSubscriptions","prevMotionValues","baseTarget","isProjectionReady","triggerBuild","valuesToRender","crossfadedValues","getCrossfadeState","update","notifyUpdate","updateTreeLayoutProjection","layoutTree","fireUpdateLayoutProjection","initialMotionValues","isMotionValue","set","isControllingVariants","checkIfControllingVariants","isVariantNode","checkIfVariantNode","depth","path","isVisible","isMounted","mount","newInstance","pointTo","addVariantChild","unmount","cancelSync","preRender","updateLayoutProjection","stopLayoutAnimation","closestVariantNode","getClosestVariantNode","other","scheduleUpdateLayoutProjection","sync","getLayoutId","layoutId","getStaticValue","setStaticValue","setVisibility","visibility","scheduleRender","canMutate","addValue","hasValue","removeValue","get","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","bindToMotionValue","getValue","defaultValue","motionValue","forEachValue","readValue","setBaseTarget","syncRender","setProps","newProps","nextValue","prevValue","existingValue","hasAnimated","updateMotionValuesFromProps","getVariant","variants","getDefaultTransition","startAtParent","context_1","numVariantProps","name_1","variantProps","enableLayoutProjection","lockProjectionTarget","unlockProjectionTarget","setCrossfader","newCrossfader","startLayoutAnimation","isRelative","progress","getProjectionAnimationProgress","relativeTarget","clearListeners","v","animateMotionValue","stop","withTransform","viewportBox","notifySetAxisTarget","force","shouldRebase","isAnimating","notifyLayoutReady","config","notifyLayoutUpdate","prevViewportBox","prevTreeScaleX","prevTreeScaleY","prevDeltaTransform","notifyViewportBoxUpdate","fireResolveRelativeTargetBox","foundParent","ancestor","resolveRelativeTargetBox","relativeParent","parentProjection","calcRelativeBox","shouldResetTransform","_layoutResetTransform","newLead","onSetAxisTarget","onLayoutAnimationComplete","presence","Presence","Present","layoutSafeToRemove","Entering","isCSSVariable","startsWith","cssVariableRegex","getVariableValue","invariant","match","exec","parseCSSVariable","token","fallback","getComputedStyle","getPropertyValue","trim","BoundingBoxDimension","positionalKeys","isPositionalKey","setAndResetVelocity","to","isNumOrPxType","number","px","getPosFromMatrix","matrix","pos","parseFloat","split","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","transformProps","filter","positionalValues","width","height","top","left","bottom","right","checkAndConvertChangedValueTypes","targetPositionalKeys","Object","keys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","from","fromType","findDimensionValueType","numKeyframes","removedTransforms","removeNonTranslationalTransform","convertedTarget","changedKeys","originBbox","elementComputedStyle","display","originComputedStyle","targetBbox","convertChangedValueTypes","unitConversion","some","hasPositionalKey","parseDomVariant","HTMLElement","resolveCSSVariables","htmlConfig","domElement","isTransformProp","defaultType","getDefaultValueType","default","computedStyle","compareDocumentPosition","style","transformPagePoint","getBoundingClientRect","convertBoundingBoxToAxisBox","transformBoundingBox","getBoundingBox","transformTemplate","mutableState","vars","transformValues","getOrigin","checkTargetForNewValues","parsed","isProjectionTranform","buildHTMLStyles","renderHTML","htmlVisualElement","svgVisualElement","camelCaseAttributes","camelToDash","getAttribute","_element","buildSVGAttrs","renderSVG","domAnimation","renderer","Component","isSVGComponent","enableHardwareAcceleration"],"mappings":"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","file":"static/js/1.327c94ca.chunk.js","sourcesContent":["function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    var prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (var i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","var AnimationType;\n(function (AnimationType) {\n    AnimationType[\"Animate\"] = \"animate\";\n    AnimationType[\"Hover\"] = \"whileHover\";\n    AnimationType[\"Tap\"] = \"whileTap\";\n    AnimationType[\"Drag\"] = \"whileDrag\";\n    AnimationType[\"Focus\"] = \"whileFocus\";\n    AnimationType[\"Exit\"] = \"exit\";\n})(AnimationType || (AnimationType = {}));\n\nexport { AnimationType };\n","import { __spreadArray, __read, __assign, __rest } from 'tslib';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.js';\nimport { shallowCompare } from '../../utils/shallow-compare.js';\nimport { animateVisualElement } from './animation.js';\nimport { AnimationType } from './types.js';\nimport { isVariantLabels, resolveVariant, isVariantLabel } from './variants.js';\n\nvar variantPriorityOrder = [\n    AnimationType.Animate,\n    AnimationType.Hover,\n    AnimationType.Tap,\n    AnimationType.Drag,\n    AnimationType.Focus,\n    AnimationType.Exit,\n];\nvar reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder)).reverse();\nvar numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return function (animations) {\n        return Promise.all(animations.map(function (_a) {\n            var animation = _a.animation, options = _a.options;\n            return animateVisualElement(visualElement, animation, options);\n        }));\n    };\n}\nfunction createAnimationState(visualElement) {\n    var animate = animateList(visualElement);\n    var state = createState();\n    var allAnimatedKeys = {};\n    var isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    var buildResolvedTypeValues = function (acc, definition) {\n        var resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            resolved.transition; var transitionEnd = resolved.transitionEnd, target = __rest(resolved, [\"transition\", \"transitionEnd\"]);\n            acc = __assign(__assign(__assign({}, acc), target), transitionEnd);\n        }\n        return acc;\n    };\n    function isAnimated(key) {\n        return allAnimatedKeys[key] !== undefined;\n    }\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        var _a;\n        var props = visualElement.getProps();\n        var context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        var animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        var removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        var encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        var removedVariantIndex = Infinity;\n        var _loop_1 = function (i) {\n            var type = reversePriorityOrder[i];\n            var typeState = state[type];\n            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n            var propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            var activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = __assign({}, encounteredKeys);\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                return \"continue\";\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            var definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;\n            var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);\n            var markToAnimate = function (key) {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (var key in allKeys) {\n                var next = resolvedValues[key];\n                var prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev)) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push.apply(animations, __spreadArray([], __read(definitionList.map(function (animation) { return ({\n                    animation: animation,\n                    options: __assign({ type: type }, options),\n                }); }))));\n            }\n        };\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (var i = 0; i < numAnimationTypes; i++) {\n            _loop_1(i);\n        }\n        allAnimatedKeys = __assign({}, encounteredKeys);\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            var fallbackAnimation_1 = {};\n            removedKeys.forEach(function (key) {\n                var fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation_1[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation_1 });\n        }\n        var shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        return animateChanges(options, type);\n    }\n    return {\n        isAnimated: isAnimated,\n        animateChanges: animateChanges,\n        setActive: setActive,\n        setAnimateFunction: setAnimateFunction,\n        getState: function () { return state; },\n    };\n}\nfunction variantsHaveChanged(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (isVariantLabels(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive) {\n    if (isActive === void 0) { isActive = false; }\n    return {\n        isActive: isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    var _a;\n    return _a = {},\n        _a[AnimationType.Animate] = createTypeState(true),\n        _a[AnimationType.Hover] = createTypeState(),\n        _a[AnimationType.Tap] = createTypeState(),\n        _a[AnimationType.Drag] = createTypeState(),\n        _a[AnimationType.Focus] = createTypeState(),\n        _a[AnimationType.Exit] = createTypeState(),\n        _a;\n}\n\nexport { createAnimationState, variantPriorityOrder, variantsHaveChanged };\n","var makeRenderlessComponent = function (hook) { return function (props) {\n    hook(props);\n    return null;\n}; };\n\nexport { makeRenderlessComponent };\n","import { __read } from 'tslib';\nimport { useEffect, useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { usePresence } from '../../components/AnimatePresence/use-presence.js';\nimport { PresenceContext } from '../../context/PresenceContext.js';\nimport { createAnimationState } from '../../render/utils/animation-state.js';\nimport { AnimationType } from '../../render/utils/types.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar animations = {\n    animation: makeRenderlessComponent(function (_a) {\n        var visualElement = _a.visualElement, animate = _a.animate;\n        /**\n         * We dynamically generate the AnimationState manager as it contains a reference\n         * to the underlying animation library. We only want to load that if we load this,\n         * so people can optionally code split it out using the `m` component.\n         */\n        visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));\n        /**\n         * Subscribe any provided AnimationControls to the component's VisualElement\n         */\n        if (isAnimationControls(animate)) {\n            useEffect(function () { return animate.subscribe(visualElement); }, [animate]);\n        }\n    }),\n    exit: makeRenderlessComponent(function (props) {\n        var custom = props.custom, visualElement = props.visualElement;\n        var _a = __read(usePresence(), 2), isPresent = _a[0], onExitComplete = _a[1];\n        var presenceContext = useContext(PresenceContext);\n        useEffect(function () {\n            var _a, _b;\n            var animation = (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Exit, !isPresent, { custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom });\n            !isPresent && (animation === null || animation === void 0 ? void 0 : animation.then(onExitComplete));\n        }, [isPresent]);\n    }),\n};\n\nexport { animations };\n","import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler, options) {\n    target.addEventListener(eventName, handler, options);\n    return function () { return target.removeEventListener(eventName, handler, options); };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    useEffect(function () {\n        var element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };\n","function isMouseEvent(event) {\n    // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.\n    if (typeof PointerEvent !== \"undefined\" && event instanceof PointerEvent) {\n        return !!(event.pointerType === \"mouse\");\n    }\n    return event instanceof MouseEvent;\n}\nfunction isTouchEvent(event) {\n    var hasTouches = !!event.touches;\n    return hasTouches;\n}\n\nexport { isMouseEvent, isTouchEvent };\n","import { isTouchEvent } from '../gestures/utils/event-type.js';\n\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */\nfunction filterPrimaryPointer(eventHandler) {\n    return function (event) {\n        var isMouseEvent = event instanceof MouseEvent;\n        var isPrimaryPointer = !isMouseEvent ||\n            (isMouseEvent && event.button === 0);\n        if (isPrimaryPointer) {\n            eventHandler(event);\n        }\n    };\n}\nvar defaultPagePoint = { pageX: 0, pageY: 0 };\nfunction pointFromTouch(e, pointType) {\n    if (pointType === void 0) { pointType = \"page\"; }\n    var primaryTouch = e.touches[0] || e.changedTouches[0];\n    var point = primaryTouch || defaultPagePoint;\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"],\n    };\n}\nfunction pointFromMouse(point, pointType) {\n    if (pointType === void 0) { pointType = \"page\"; }\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"],\n    };\n}\nfunction extractEventInfo(event, pointType) {\n    if (pointType === void 0) { pointType = \"page\"; }\n    return {\n        point: isTouchEvent(event)\n            ? pointFromTouch(event, pointType)\n            : pointFromMouse(event, pointType),\n    };\n}\nfunction getViewportPointFromEvent(event) {\n    return extractEventInfo(event, \"client\");\n}\nvar wrapHandler = function (handler, shouldFilterPrimaryPointer) {\n    if (shouldFilterPrimaryPointer === void 0) { shouldFilterPrimaryPointer = false; }\n    var listener = function (event) {\n        return handler(event, extractEventInfo(event));\n    };\n    return shouldFilterPrimaryPointer\n        ? filterPrimaryPointer(listener)\n        : listener;\n};\n\nexport { extractEventInfo, getViewportPointFromEvent, wrapHandler };\n","import { useDomEvent, addDomEvent } from './use-dom-event.js';\nimport { wrapHandler } from './event-info.js';\nimport { supportsPointerEvents, supportsTouchEvents, supportsMouseEvents } from './utils.js';\n\nvar mouseEventNames = {\n    pointerdown: \"mousedown\",\n    pointermove: \"mousemove\",\n    pointerup: \"mouseup\",\n    pointercancel: \"mousecancel\",\n    pointerover: \"mouseover\",\n    pointerout: \"mouseout\",\n    pointerenter: \"mouseenter\",\n    pointerleave: \"mouseleave\",\n};\nvar touchEventNames = {\n    pointerdown: \"touchstart\",\n    pointermove: \"touchmove\",\n    pointerup: \"touchend\",\n    pointercancel: \"touchcancel\",\n};\nfunction getPointerEventName(name) {\n    if (supportsPointerEvents()) {\n        return name;\n    }\n    else if (supportsTouchEvents()) {\n        return touchEventNames[name];\n    }\n    else if (supportsMouseEvents()) {\n        return mouseEventNames[name];\n    }\n    return name;\n}\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, getPointerEventName(eventName), wrapHandler(handler, eventName === \"pointerdown\"), options);\n}\nfunction usePointerEvent(ref, eventName, handler, options) {\n    return useDomEvent(ref, getPointerEventName(eventName), handler && wrapHandler(handler, eventName === \"pointerdown\"), options);\n}\n\nexport { addPointerEvent, usePointerEvent };\n","import { isBrowser } from '../utils/is-browser.js';\n\n// We check for event support via functions in case they've been mocked by a testing suite.\nvar supportsPointerEvents = function () {\n    return isBrowser && window.onpointerdown === null;\n};\nvar supportsTouchEvents = function () {\n    return isBrowser && window.ontouchstart === null;\n};\nvar supportsMouseEvents = function () {\n    return isBrowser && window.onmousedown === null;\n};\n\nexport { supportsMouseEvents, supportsPointerEvents, supportsTouchEvents };\n","function createLock(name) {\n    var lock = null;\n    return function () {\n        var openLock = function () {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nvar globalHorizontalLock = createLock(\"dragHorizontal\");\nvar globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    var lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        var openHorizontal_1 = globalHorizontalLock();\n        var openVertical_1 = globalVerticalLock();\n        if (openHorizontal_1 && openVertical_1) {\n            lock = function () {\n                openHorizontal_1();\n                openVertical_1();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal_1)\n                openHorizontal_1();\n            if (openVertical_1)\n                openVertical_1();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    var openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","import { isMouseEvent } from './utils/event-type.js';\nimport { AnimationType } from '../render/utils/types.js';\nimport { usePointerEvent } from '../events/use-pointer-event.js';\nimport { isDragActive } from './drag/utils/lock.js';\n\nfunction createHoverEvent(visualElement, isActive, callback) {\n    return function (event, info) {\n        var _a;\n        if (!isMouseEvent(event) || isDragActive())\n            return;\n        callback === null || callback === void 0 ? void 0 : callback(event, info);\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Hover, isActive);\n    };\n}\nfunction useHoverGesture(_a) {\n    var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement = _a.visualElement;\n    usePointerEvent(visualElement, \"pointerenter\", onHoverStart || whileHover\n        ? createHoverEvent(visualElement, true, onHoverStart)\n        : undefined);\n    usePointerEvent(visualElement, \"pointerleave\", onHoverEnd || whileHover\n        ? createHoverEvent(visualElement, false, onHoverEnd)\n        : undefined);\n}\n\nexport { useHoverGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nvar isNodeOrChild = function (parent, child) {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { useFocusGesture } from '../../gestures/use-focus-gesture.js';\nimport { useHoverGesture } from '../../gestures/use-hover-gesture.js';\nimport { useTapGesture } from '../../gestures/use-tap-gesture.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar gestureAnimations = {\n    tap: makeRenderlessComponent(useTapGesture),\n    focus: makeRenderlessComponent(useFocusGesture),\n    hover: makeRenderlessComponent(useHoverGesture),\n};\n\nexport { gestureAnimations };\n","import { useRef } from 'react';\nimport { isNodeOrChild } from './utils/is-node-or-child.js';\nimport { usePointerEvent, addPointerEvent } from '../events/use-pointer-event.js';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.js';\nimport { pipe } from 'popmotion';\nimport { AnimationType } from '../render/utils/types.js';\nimport { isDragActive } from './drag/utils/lock.js';\n\n/**\n * @param handlers -\n * @internal\n */\nfunction useTapGesture(_a) {\n    var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement = _a.visualElement;\n    var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n    var isPressing = useRef(false);\n    var cancelPointerEndListeners = useRef(null);\n    function removePointerEndListener() {\n        var _a;\n        (_a = cancelPointerEndListeners.current) === null || _a === void 0 ? void 0 : _a.call(cancelPointerEndListeners);\n        cancelPointerEndListeners.current = null;\n    }\n    function checkPointerEnd() {\n        var _a;\n        removePointerEndListener();\n        isPressing.current = false;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, false);\n        return !isDragActive();\n    }\n    function onPointerUp(event, info) {\n        if (!checkPointerEnd())\n            return;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n        !isNodeOrChild(visualElement.getInstance(), event.target)\n            ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info)\n            : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);\n    }\n    function onPointerCancel(event, info) {\n        if (!checkPointerEnd())\n            return;\n        onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);\n    }\n    function onPointerDown(event, info) {\n        var _a;\n        removePointerEndListener();\n        if (isPressing.current)\n            return;\n        isPressing.current = true;\n        cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp), addPointerEvent(window, \"pointercancel\", onPointerCancel));\n        onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, true);\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined);\n    useUnmountEffect(removePointerEndListener);\n}\n\nexport { useTapGesture };\n","import { AnimationType } from '../render/utils/types.js';\nimport { useDomEvent } from '../events/use-dom-event.js';\n\n/**\n *\n * @param props\n * @param ref\n * @internal\n */\nfunction useFocusGesture(_a) {\n    var whileFocus = _a.whileFocus, visualElement = _a.visualElement;\n    var onFocus = function () {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Focus, true);\n    };\n    var onBlur = function () {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Focus, false);\n    };\n    useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\nexport { useFocusGesture };\n","// Call a handler once for each axis\nfunction eachAxis(handler) {\n    return [handler(\"x\"), handler(\"y\")];\n}\n\nexport { eachAxis };\n","function isDraggable(visualElement) {\n    var _a = visualElement.getProps(), drag = _a.drag, _dragX = _a._dragX;\n    return drag && !_dragX;\n}\n\nexport { isDraggable };\n","import { __read } from 'tslib';\nimport { mix } from 'popmotion';\nimport { isDraggable } from '../../render/utils/is-draggable.js';\n\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction resetAxis(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction resetBox(box, originBox) {\n    resetAxis(box.x, originBox.x);\n    resetAxis(box.y, originBox.y);\n}\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    var distanceFromOrigin = point - originPoint;\n    var scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate, scale, originPoint, boxScale) {\n    if (translate === void 0) { translate = 0; }\n    if (scale === void 0) { scale = 1; }\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, _a) {\n    var x = _a.x, y = _a.y;\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction applyAxisTransforms(final, axis, transforms, _a) {\n    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    // Copy the current axis to the final axis before mutation\n    final.min = axis.min;\n    final.max = axis.max;\n    var axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    var originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(final, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nvar xKeys = [\"x\", \"scaleX\", \"originX\"];\nvar yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction applyBoxTransforms(finalBox, box, transforms) {\n    applyAxisTransforms(finalBox.x, box.x, transforms, xKeys);\n    applyAxisTransforms(finalBox.y, box.y, transforms, yKeys);\n}\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate, scale, origin, boxScale) {\n    if (translate === void 0) { translate = 0; }\n    if (scale === void 0) { scale = 1; }\n    if (origin === void 0) { origin = 0.5; }\n    var originPoint = mix(axis.min, axis.max, origin) - translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, _a) {\n    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale);\n}\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms) {\n    removeAxisTransforms(box.x, transforms, xKeys);\n    removeAxisTransforms(box.y, transforms, yKeys);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath) {\n    var treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    var node;\n    var delta;\n    for (var i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.getLayoutState().delta;\n        // Incoporate each ancestor's scale into a culmulative treeScale for this component\n        treeScale.x *= delta.x.scale;\n        treeScale.y *= delta.y.scale;\n        // Apply each ancestor's calculated delta into this component's recorded layout box\n        applyBoxDelta(box, delta);\n        // If this is a draggable ancestor, also incorporate the node's transform to the layout box\n        if (isDraggable(node)) {\n            applyBoxTransforms(box, box, node.getLatestValues());\n        }\n    }\n}\n\nexport { applyAxisDelta, applyAxisTransforms, applyBoxDelta, applyBoxTransforms, applyPointDelta, applyTreeDeltas, removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta, resetAxis, resetBox, scalePoint };\n","var isPoint = function (point) {\n    return point.hasOwnProperty('x') && point.hasOwnProperty('y');\n};\n\nexport { isPoint };\n","import { isPoint } from './is-point.js';\n\nvar isPoint3D = function (point) {\n    return isPoint(point) && point.hasOwnProperty('z');\n};\n\nexport { isPoint3D };\n","import { isPoint } from './is-point.js';\nimport { isPoint3D } from './is-point-3d.js';\nimport { isNum } from './inc.js';\n\nvar distance1D = function (a, b) { return Math.abs(a - b); };\nfunction distance(a, b) {\n    if (isNum(a) && isNum(b)) {\n        return distance1D(a, b);\n    }\n    else if (isPoint(a) && isPoint(b)) {\n        var xDelta = distance1D(a.x, b.x);\n        var yDelta = distance1D(a.y, b.y);\n        var zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;\n        return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));\n    }\n}\n\nexport { distance };\n","import { mix, distance, clamp, progress } from 'popmotion';\n\nvar clampProgress = function (v) { return clamp(0, 1, v); };\n/**\n * Returns true if the provided value is within maxDistance of the provided target\n */\nfunction isNear(value, target, maxDistance) {\n    if (target === void 0) { target = 0; }\n    if (maxDistance === void 0) { maxDistance = 0.01; }\n    return distance(value, target) < maxDistance;\n}\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    var origin = 0.5;\n    var sourceLength = calcLength(source);\n    var targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clampProgress(origin);\n}\n/**\n * Update the AxisDelta with a transform that projects source into target.\n *\n * The transform `origin` is optional. If not provided, it'll be automatically\n * calculated based on the relative positions of the two bounding boxes.\n */\nfunction updateAxisDelta(delta, source, target, origin) {\n    if (origin === void 0) { origin = 0.5; }\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate))\n        delta.translate = 0;\n}\n/**\n * Update the BoxDelta with a transform that projects the source into the target.\n *\n * The transform `origin` is optional. If not provided, it'll be automatically\n * calculated based on the relative positions of the two bounding boxes.\n */\nfunction updateBoxDelta(delta, source, target, origin) {\n    updateAxisDelta(delta.x, source.x, target.x, defaultOrigin(origin.originX));\n    updateAxisDelta(delta.y, source.y, target.y, defaultOrigin(origin.originY));\n}\n/**\n * Currently this only accepts numerical origins, measured as 0-1, but could\n * accept pixel values by comparing to the target axis.\n */\nfunction defaultOrigin(origin) {\n    return typeof origin === \"number\" ? origin : 0.5;\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(projection, parentProjection) {\n    calcRelativeAxis(projection.target.x, projection.relativeTarget.x, parentProjection.target.x);\n    calcRelativeAxis(projection.target.y, projection.relativeTarget.y, parentProjection.target.y);\n}\n\nexport { calcOrigin, calcRelativeAxis, calcRelativeBox, isNear, updateAxisDelta, updateBoxDelta };\n","import { axisBox, delta } from '../../utils/geometry/index.js';\n\nvar createProjectionState = function () { return ({\n    isEnabled: false,\n    isHydrated: false,\n    isTargetLocked: false,\n    target: axisBox(),\n    targetFinal: axisBox(),\n}); };\nfunction createLayoutState() {\n    return {\n        isHydrated: false,\n        layout: axisBox(),\n        layoutCorrected: axisBox(),\n        treeScale: { x: 1, y: 1 },\n        delta: delta(),\n        deltaFinal: delta(),\n        deltaTransform: \"\",\n    };\n}\nvar zeroLayout = createLayoutState();\n\nexport { createLayoutState, createProjectionState, zeroLayout };\n","import { zeroLayout } from '../../utils/state.js';\n\n/**\n * Build a transform style that takes a calculated delta between the element's current\n * space on screen and projects it into the desired space.\n */\nfunction buildLayoutProjectionTransform(_a, treeScale, latestTransform) {\n    var x = _a.x, y = _a.y;\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    var xTranslate = x.translate / treeScale.x;\n    var yTranslate = y.translate / treeScale.y;\n    var transform = \"translate3d(\" + xTranslate + \"px, \" + yTranslate + \"px, 0) \";\n    if (latestTransform) {\n        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;\n        if (rotate)\n            transform += \"rotate(\" + rotate + \") \";\n        if (rotateX)\n            transform += \"rotateX(\" + rotateX + \") \";\n        if (rotateY)\n            transform += \"rotateY(\" + rotateY + \") \";\n    }\n    transform += \"scale(\" + x.scale + \", \" + y.scale + \")\";\n    return !latestTransform && transform === identityProjection ? \"\" : transform;\n}\n/**\n * Take the calculated delta origin and apply it as a transform string.\n */\nfunction buildLayoutProjectionTransformOrigin(_a) {\n    var deltaFinal = _a.deltaFinal;\n    return deltaFinal.x.origin * 100 + \"% \" + deltaFinal.y.origin * 100 + \"% 0\";\n}\nvar identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, { x: 1, y: 1 });\n\nexport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, identityProjection };\n","import { __spreadArray, __read } from 'tslib';\nimport { SubscriptionManager } from '../../utils/subscription-manager.js';\n\nvar names = [\n    \"LayoutMeasure\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutUpdate\",\n    \"ViewportBoxUpdate\",\n    \"Update\",\n    \"Render\",\n    \"AnimationComplete\",\n    \"LayoutAnimationComplete\",\n    \"AnimationStart\",\n    \"SetAxisTarget\",\n    \"Unmount\",\n];\nfunction createLifecycles() {\n    var managers = names.map(function () { return new SubscriptionManager(); });\n    var propSubscriptions = {};\n    var lifecycles = {\n        clearAllListeners: function () { return managers.forEach(function (manager) { return manager.clear(); }); },\n        updatePropListeners: function (props) {\n            return names.forEach(function (name) {\n                var _a;\n                (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);\n                var on = \"on\" + name;\n                var propListener = props[on];\n                if (propListener) {\n                    propSubscriptions[name] = lifecycles[on](propListener);\n                }\n            });\n        },\n    };\n    managers.forEach(function (manager, i) {\n        lifecycles[\"on\" + names[i]] = function (handler) { return manager.add(handler); };\n        lifecycles[\"notify\" + names[i]] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return manager.notify.apply(manager, __spreadArray([], __read(args)));\n        };\n    });\n    return lifecycles;\n}\n\nexport { createLifecycles };\n","import { resetBox, applyTreeDeltas } from '../../utils/geometry/delta-apply.js';\nimport { updateBoxDelta } from '../../utils/geometry/delta-calc.js';\n\nfunction updateLayoutDeltas(_a, _b, treePath, transformOrigin) {\n    var delta = _a.delta, layout = _a.layout, layoutCorrected = _a.layoutCorrected, treeScale = _a.treeScale;\n    var target = _b.target;\n    /**\n     * Reset the corrected box with the latest values from box, as we're then going\n     * to perform mutative operations on it.\n     */\n    resetBox(layoutCorrected, layout);\n    /**\n     * Apply all the parent deltas to this box to produce the corrected box. This\n     * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n     */\n    applyTreeDeltas(layoutCorrected, treeScale, treePath);\n    /**\n     * Update the delta between the corrected box and the target box before user-set transforms were applied.\n     * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n     * for our layout reprojection, but still allow them to be scaled correctly by the user.\n     * It might be that to simplify this we may want to accept that user-set scale is also corrected\n     * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n     * to allow people to choose whether these styles are corrected based on just the\n     * layout reprojection or the final bounding box.\n     */\n    updateBoxDelta(delta, layoutCorrected, target, transformOrigin);\n}\n\nexport { updateLayoutDeltas };\n","import { addUniqueItem, removeItem } from '../../utils/array.js';\nimport { compareByDepth } from './compare-by-depth.js';\n\nvar FlatTree = /** @class */ (function () {\n    function FlatTree() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    FlatTree.prototype.add = function (child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.remove = function (child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.forEach = function (callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    };\n    return FlatTree;\n}());\n\nexport { FlatTree };\n","import { mix } from 'popmotion';\n\nfunction tweenAxis(target, prev, next, p) {\n    target.min = mix(prev.min, next.min, p);\n    target.max = mix(prev.max, next.max, p);\n}\nfunction calcRelativeOffsetAxis(parent, child) {\n    return {\n        min: child.min - parent.min,\n        max: child.max - parent.min,\n    };\n}\nfunction calcRelativeOffset(parent, child) {\n    return {\n        x: calcRelativeOffsetAxis(parent.x, child.x),\n        y: calcRelativeOffsetAxis(parent.y, child.y),\n    };\n}\nfunction checkIfParentHasChanged(prev, next) {\n    var prevId = prev.getLayoutId();\n    var nextId = next.getLayoutId();\n    return prevId !== nextId || (nextId === undefined && prev !== next);\n}\n\nexport { calcRelativeOffset, calcRelativeOffsetAxis, checkIfParentHasChanged, tweenAxis };\n","import { calcRelativeOffset } from '../../../motion/features/layout/utils.js';\nimport { eachAxis } from '../../../utils/each-axis.js';\n\nfunction setCurrentViewportBox(visualElement) {\n    var projectionParent = visualElement.getProjectionParent();\n    if (!projectionParent) {\n        visualElement.rebaseProjectionTarget();\n        return;\n    }\n    var relativeOffset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);\n    eachAxis(function (axis) {\n        visualElement.setProjectionTargetAxis(axis, relativeOffset[axis].min, relativeOffset[axis].max, true);\n    });\n}\n\nexport { setCurrentViewportBox };\n","import { __assign, __spreadArray, __read } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { pipe } from 'popmotion';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { axisBox } from '../utils/geometry/index.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { calcRelativeBox, updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { motionValue } from '../value/index.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { buildLayoutProjectionTransform } from './html/utils/build-projection-transform.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\nimport { createLayoutState, createProjectionState } from './utils/state.js';\nimport { FlatTree } from './utils/flat-tree.js';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.js';\nimport { setCurrentViewportBox } from './dom/projection/relative-set.js';\nimport { isDraggable } from './utils/is-draggable.js';\n\nvar visualElement = function (_a) {\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, resetTransform = _a.resetTransform, restoreTransform = _a.restoreTransform, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n    return function (_a, options) {\n        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState;\n        if (options === void 0) { options = {}; }\n        var latestValues = visualState.latestValues, renderState = visualState.renderState;\n        /**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */\n        var instance;\n        /**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender and onViewportBoxUpdate.\n         */\n        var lifecycles = createLifecycles();\n        /**\n         *\n         */\n        var projection = createProjectionState();\n        /**\n         * A reference to the nearest projecting parent. This is either\n         * undefined if we haven't looked for the nearest projecting parent,\n         * false if there is no parent performing layout projection, or a reference\n         * to the projecting parent.\n         */\n        var projectionParent;\n        /**\n         * This is a reference to the visual state of the \"lead\" visual element.\n         * Usually, this will be this visual element. But if it shares a layoutId\n         * with other visual elements, only one of them will be designated lead by\n         * AnimateSharedLayout. All the other visual elements will take on the visual\n         * appearance of the lead while they crossfade to it.\n         */\n        var leadProjection = projection;\n        var leadLatestValues = latestValues;\n        var unsubscribeFromLeadVisualElement;\n        /**\n         * The latest layout measurements and calculated projections. This\n         * is seperate from the target projection data in visualState as\n         * many visual elements might point to the same piece of visualState as\n         * a target, whereas they might each have different layouts and thus\n         * projection calculations needed to project into the same viewport box.\n         */\n        var layoutState = createLayoutState();\n        /**\n         *\n         */\n        var crossfader;\n        /**\n         * Keep track of whether the viewport box has been updated since the\n         * last time the layout projection was re-calculated.\n         */\n        var hasViewportBoxUpdated = false;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        var values = new Map();\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        var valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        var prevMotionValues = {};\n        /**\n         * x/y motion values that track the progress of initiated layout\n         * animations.\n         *\n         * TODO: Target for removal\n         */\n        var projectionTargetProgress;\n        /**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */\n        var baseTarget = __assign({}, latestValues);\n        // Internal methods ========================\n        /**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */\n        var removeFromVariantTree;\n        /**\n         *\n         */\n        function render() {\n            if (!instance)\n                return;\n            if (element.isProjectionReady()) {\n                /**\n                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n                 * This is the final box that we will then project into by calculating a transform delta and\n                 * applying it to the corrected box.\n                 */\n                applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n                /**\n                 * Update the delta between the corrected box and the final target box, after\n                 * user-set transforms are applied to it. This will be used by the renderer to\n                 * create a transform style that will reproject the element from its actual layout\n                 * into the desired bounding box.\n                 */\n                updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n            }\n            triggerBuild();\n            renderInstance(instance, renderState);\n        }\n        function triggerBuild() {\n            var valuesToRender = latestValues;\n            if (crossfader && crossfader.isActive()) {\n                var crossfadedValues = crossfader.getCrossfadeState(element);\n                if (crossfadedValues)\n                    valuesToRender = crossfadedValues;\n            }\n            build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n        }\n        function update() {\n            lifecycles.notifyUpdate(latestValues);\n        }\n        function updateLayoutProjection() {\n            if (!element.isProjectionReady())\n                return;\n            var delta = layoutState.delta, treeScale = layoutState.treeScale;\n            var prevTreeScaleX = treeScale.x;\n            var prevTreeScaleY = treeScale.y;\n            var prevDeltaTransform = layoutState.deltaTransform;\n            updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n            hasViewportBoxUpdated &&\n                element.notifyViewportBoxUpdate(leadProjection.target, delta);\n            hasViewportBoxUpdated = false;\n            var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n            if (deltaTransform !== prevDeltaTransform ||\n                // Also compare calculated treeScale, for values that rely on this only for scale correction\n                prevTreeScaleX !== treeScale.x ||\n                prevTreeScaleY !== treeScale.y) {\n                element.scheduleRender();\n            }\n            layoutState.deltaTransform = deltaTransform;\n        }\n        function updateTreeLayoutProjection() {\n            element.layoutTree.forEach(fireUpdateLayoutProjection);\n        }\n        /**\n         *\n         */\n        function bindToMotionValue(key, value) {\n            var removeOnChange = value.onChange(function (latestValue) {\n                latestValues[key] = latestValue;\n                props.onUpdate && sync.update(update, false, true);\n            });\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n            valueSubscriptions.set(key, function () {\n                removeOnChange();\n                removeOnRenderRequest();\n            });\n        }\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        var initialMotionValues = scrapeMotionValuesFromProps(props);\n        for (var key in initialMotionValues) {\n            var value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        var isControllingVariants = checkIfControllingVariants(props);\n        var isVariantNode = checkIfVariantNode(props);\n        var element = __assign(__assign({ treeType: treeType, \n            /**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */\n            current: null, \n            /**\n             * The depth of this visual element within the visual element tree.\n             */\n            depth: parent ? parent.depth + 1 : 0, parent: parent, children: new Set(), \n            /**\n             * An ancestor path back to the root visual element. This is used\n             * by layout projection to quickly recurse back up the tree.\n             */\n            path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [], layoutTree: parent ? parent.layoutTree : new FlatTree(), \n            /**\n             *\n             */\n            presenceId: presenceId,\n            projection: projection, \n            /**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */\n            variantChildren: isVariantNode ? new Set() : undefined, \n            /**\n             * Whether this instance is visible. This can be changed imperatively\n             * by AnimateSharedLayout, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */\n            isVisible: undefined, \n            /**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */\n            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \n            /**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */\n            blockInitialAnimation: blockInitialAnimation, \n            /**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */\n            isMounted: function () { return Boolean(instance); }, mount: function (newInstance) {\n                instance = element.current = newInstance;\n                element.pointTo(element);\n                if (isVariantNode && parent && !isControllingVariants) {\n                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n                }\n                parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            },\n            /**\n             *\n             */\n            unmount: function () {\n                cancelSync.update(update);\n                cancelSync.render(render);\n                cancelSync.preRender(element.updateLayoutProjection);\n                valueSubscriptions.forEach(function (remove) { return remove(); });\n                element.stopLayoutAnimation();\n                element.layoutTree.remove(element);\n                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n                parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                lifecycles.clearAllListeners();\n            },\n            /**\n             * Add a child visual element to our set of children.\n             */\n            addVariantChild: function (child) {\n                var _a;\n                var closestVariantNode = element.getClosestVariantNode();\n                if (closestVariantNode) {\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                    return function () { return closestVariantNode.variantChildren.delete(child); };\n                }\n            },\n            sortNodePosition: function (other) {\n                /**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */\n                if (!sortNodePosition || treeType !== other.treeType)\n                    return 0;\n                return sortNodePosition(element.getInstance(), other.getInstance());\n            }, \n            /**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */\n            getClosestVariantNode: function () {\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n            }, \n            /**\n             * A method that schedules an update to layout projections throughout\n             * the tree. We inherit from the parent so there's only ever one\n             * job scheduled on the next frame - that of the root visual element.\n             */\n            scheduleUpdateLayoutProjection: parent\n                ? parent.scheduleUpdateLayoutProjection\n                : function () {\n                    return sync.preRender(element.updateTreeLayoutProjection, false, true);\n                }, \n            /**\n             * Expose the latest layoutId prop.\n             */\n            getLayoutId: function () { return props.layoutId; }, \n            /**\n             * Returns the current instance.\n             */\n            getInstance: function () { return instance; }, \n            /**\n             * Get/set the latest static values.\n             */\n            getStaticValue: function (key) { return latestValues[key]; }, setStaticValue: function (key, value) { return (latestValues[key] = value); }, \n            /**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */\n            getLatestValues: function () { return latestValues; }, \n            /**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */\n            setVisibility: function (visibility) {\n                if (element.isVisible === visibility)\n                    return;\n                element.isVisible = visibility;\n                element.scheduleRender();\n            },\n            /**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */\n            makeTargetAnimatable: function (target, canMutate) {\n                if (canMutate === void 0) { canMutate = true; }\n                return makeTargetAnimatable(element, target, props, canMutate);\n            },\n            // Motion values ========================\n            /**\n             * Add a motion value and bind it to this visual element.\n             */\n            addValue: function (key, value) {\n                // Remove existing value if it exists\n                if (element.hasValue(key))\n                    element.removeValue(key);\n                values.set(key, value);\n                latestValues[key] = value.get();\n                bindToMotionValue(key, value);\n            },\n            /**\n             * Remove a motion value and unbind any active subscriptions.\n             */\n            removeValue: function (key) {\n                var _a;\n                values.delete(key);\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n                valueSubscriptions.delete(key);\n                delete latestValues[key];\n                removeValueFromRenderState(key, renderState);\n            }, \n            /**\n             * Check whether we have a motion value for this key\n             */\n            hasValue: function (key) { return values.has(key); }, \n            /**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */\n            getValue: function (key, defaultValue) {\n                var value = values.get(key);\n                if (value === undefined && defaultValue !== undefined) {\n                    value = motionValue(defaultValue);\n                    element.addValue(key, value);\n                }\n                return value;\n            }, \n            /**\n             * Iterate over our motion values.\n             */\n            forEachValue: function (callback) { return values.forEach(callback); }, \n            /**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */\n            readValue: function (key) { var _a; return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options); }, \n            /**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */\n            setBaseTarget: function (key, value) {\n                baseTarget[key] = value;\n            },\n            /**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */\n            getBaseTarget: function (key) {\n                if (getBaseTarget) {\n                    var target = getBaseTarget(props, key);\n                    if (target !== undefined && !isMotionValue(target))\n                        return target;\n                }\n                return baseTarget[key];\n            } }, lifecycles), { \n            /**\n             * Build the renderer state based on the latest visual state.\n             */\n            build: function () {\n                triggerBuild();\n                return renderState;\n            },\n            /**\n             * Schedule a render on the next animation frame.\n             */\n            scheduleRender: function () {\n                sync.render(render, false, true);\n            }, \n            /**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */\n            syncRender: render, \n            /**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */\n            setProps: function (newProps) {\n                props = newProps;\n                lifecycles.updatePropListeners(newProps);\n                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n            }, getProps: function () { return props; }, \n            // Variants ==============================\n            /**\n             * Returns the variant definition with a given name.\n             */\n            getVariant: function (name) { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \n            /**\n             * Returns the defined default transition on this component.\n             */\n            getDefaultTransition: function () { return props.transition; }, \n            /**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */\n            getVariantContext: function (startAtParent) {\n                if (startAtParent === void 0) { startAtParent = false; }\n                if (startAtParent)\n                    return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n                if (!isControllingVariants) {\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                    if (props.initial !== undefined) {\n                        context_1.initial = props.initial;\n                    }\n                    return context_1;\n                }\n                var context = {};\n                for (var i = 0; i < numVariantProps; i++) {\n                    var name_1 = variantProps[i];\n                    var prop = props[name_1];\n                    if (isVariantLabel(prop) || prop === false) {\n                        context[name_1] = prop;\n                    }\n                }\n                return context;\n            },\n            // Layout projection ==============================\n            /**\n             * Enable layout projection for this visual element. Won't actually\n             * occur until we also have hydrated layout measurements.\n             */\n            enableLayoutProjection: function () {\n                projection.isEnabled = true;\n                element.layoutTree.add(element);\n            },\n            /**\n             * Lock the projection target, for instance when dragging, so\n             * nothing else can try and animate it.\n             */\n            lockProjectionTarget: function () {\n                projection.isTargetLocked = true;\n            },\n            unlockProjectionTarget: function () {\n                element.stopLayoutAnimation();\n                projection.isTargetLocked = false;\n            }, getLayoutState: function () { return layoutState; }, setCrossfader: function (newCrossfader) {\n                crossfader = newCrossfader;\n            }, isProjectionReady: function () {\n                return projection.isEnabled &&\n                    projection.isHydrated &&\n                    layoutState.isHydrated;\n            }, \n            /**\n             * Start a layout animation on a given axis.\n             */\n            startLayoutAnimation: function (axis, transition, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var progress = element.getProjectionAnimationProgress()[axis];\n                var _a = isRelative\n                    ? projection.relativeTarget[axis]\n                    : projection.target[axis], min = _a.min, max = _a.max;\n                var length = max - min;\n                progress.clearListeners();\n                progress.set(min);\n                progress.set(min); // Set twice to hard-reset velocity\n                progress.onChange(function (v) {\n                    element.setProjectionTargetAxis(axis, v, v + length, isRelative);\n                });\n                return element.animateMotionValue(axis, progress, 0, transition);\n            },\n            /**\n             * Stop layout animations.\n             */\n            stopLayoutAnimation: function () {\n                eachAxis(function (axis) {\n                    return element.getProjectionAnimationProgress()[axis].stop();\n                });\n            },\n            /**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */\n            measureViewportBox: function (withTransform) {\n                if (withTransform === void 0) { withTransform = true; }\n                var viewportBox = measureViewportBox(instance, options);\n                if (!withTransform)\n                    removeBoxTransforms(viewportBox, latestValues);\n                return viewportBox;\n            },\n            /**\n             * Get the motion values tracking the layout animations on each\n             * axis. Lazy init if not already created.\n             */\n            getProjectionAnimationProgress: function () {\n                projectionTargetProgress || (projectionTargetProgress = {\n                    x: motionValue(0),\n                    y: motionValue(0),\n                });\n                return projectionTargetProgress;\n            },\n            /**\n             * Update the projection of a single axis. Schedule an update to\n             * the tree layout projection.\n             */\n            setProjectionTargetAxis: function (axis, min, max, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var target;\n                if (isRelative) {\n                    if (!projection.relativeTarget) {\n                        projection.relativeTarget = axisBox();\n                    }\n                    target = projection.relativeTarget[axis];\n                }\n                else {\n                    projection.relativeTarget = undefined;\n                    target = projection.target[axis];\n                }\n                projection.isHydrated = true;\n                target.min = min;\n                target.max = max;\n                // Flag that we want to fire the onViewportBoxUpdate event handler\n                hasViewportBoxUpdated = true;\n                lifecycles.notifySetAxisTarget();\n            },\n            /**\n             * Rebase the projection target on top of the provided viewport box\n             * or the measured layout. This ensures that non-animating elements\n             * don't fall out of sync differences in measurements vs projections\n             * after a page scroll or other relayout.\n             */\n            rebaseProjectionTarget: function (force, box) {\n                if (box === void 0) { box = layoutState.layout; }\n                var _a = element.getProjectionAnimationProgress(), x = _a.x, y = _a.y;\n                var shouldRebase = !projection.relativeTarget &&\n                    !projection.isTargetLocked &&\n                    !x.isAnimating() &&\n                    !y.isAnimating();\n                if (force || shouldRebase) {\n                    eachAxis(function (axis) {\n                        var _a = box[axis], min = _a.min, max = _a.max;\n                        element.setProjectionTargetAxis(axis, min, max);\n                    });\n                }\n            },\n            /**\n             * Notify the visual element that its layout is up-to-date.\n             * Currently Animate.tsx uses this to check whether a layout animation\n             * needs to be performed.\n             */\n            notifyLayoutReady: function (config) {\n                setCurrentViewportBox(element);\n                element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n            }, \n            /**\n             * Temporarily reset the transform of the instance.\n             */\n            resetTransform: function () { return resetTransform(element, instance, props); }, restoreTransform: function () { return restoreTransform(instance, renderState); }, updateLayoutProjection: updateLayoutProjection,\n            updateTreeLayoutProjection: function () {\n                element.layoutTree.forEach(fireResolveRelativeTargetBox);\n                /**\n                 * Schedule the projection updates at the end of the current preRender\n                 * step. This will ensure that all layout trees will first resolve\n                 * relative projection boxes into viewport boxes, and *then*\n                 * update projections.\n                 */\n                sync.preRender(updateTreeLayoutProjection, false, true);\n                // sync.postRender(() => element.scheduleUpdateLayoutProjection())\n            },\n            getProjectionParent: function () {\n                if (projectionParent === undefined) {\n                    var foundParent = false;\n                    // Search backwards through the tree path\n                    for (var i = element.path.length - 1; i >= 0; i--) {\n                        var ancestor = element.path[i];\n                        if (ancestor.projection.isEnabled) {\n                            foundParent = ancestor;\n                            break;\n                        }\n                    }\n                    projectionParent = foundParent;\n                }\n                return projectionParent;\n            },\n            resolveRelativeTargetBox: function () {\n                var relativeParent = element.getProjectionParent();\n                if (!projection.relativeTarget || !relativeParent)\n                    return;\n                calcRelativeBox(projection, relativeParent.projection);\n                if (isDraggable(relativeParent)) {\n                    var target = projection.target;\n                    applyBoxTransforms(target, target, relativeParent.getLatestValues());\n                }\n            },\n            shouldResetTransform: function () {\n                return Boolean(props._layoutResetTransform);\n            },\n            /**\n             *\n             */\n            pointTo: function (newLead) {\n                leadProjection = newLead.projection;\n                leadLatestValues = newLead.getLatestValues();\n                /**\n                 * Subscribe to lead component's layout animations\n                 */\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n                    var _a;\n                    if (element.isPresent) {\n                        element.presence = Presence.Present;\n                    }\n                    else {\n                        (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n                    }\n                }));\n            }, \n            // TODO: Clean this up\n            isPresent: true, presence: Presence.Entering });\n        return element;\n    };\n};\nfunction fireResolveRelativeTargetBox(child) {\n    child.resolveRelativeTargetBox();\n}\nfunction fireUpdateLayoutProjection(child) {\n    child.updateLayoutProjection();\n}\nvar variantProps = __spreadArray([\"initial\"], __read(variantPriorityOrder));\nvar numVariantProps = variantProps.length;\n\nexport { visualElement };\n","import { motionValue } from '../../value/index.js';\nimport { isMotionValue } from '../../value/utils/is-motion-value.js';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    var _a;\n    for (var key in next) {\n        var nextValue = next[key];\n        var prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping to a new motion value, create a new motion value\n             * from that\n             */\n            element.addValue(key, motionValue(nextValue));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                var existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for (var key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { __rest, __assign, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\n\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nvar cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    var match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    var _a = __read(match, 3), token = _a[1], fallback = _a[2];\n    return [token, fallback];\n}\nvar maxDepth = 4;\nfunction getVariableValue(current, element, depth) {\n    if (depth === void 0) { depth = 1; }\n    invariant(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\" + current + \"\\\". This may indicate a circular fallback dependency.\");\n    var _a = __read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    var resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, _a, transitionEnd) {\n    var _b;\n    var target = __rest(_a, []);\n    var element = visualElement.getInstance();\n    if (!(element instanceof HTMLElement))\n        return { target: target, transitionEnd: transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = __assign({}, transitionEnd);\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.forEachValue(function (value) {\n        var current = value.get();\n        if (!isCSSVariable(current))\n            return;\n        var resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (var key in target) {\n        var current = target[key];\n        if (!isCSSVariable(current))\n            continue;\n        var resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd)\n            (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : (transitionEnd[key] = current);\n    }\n    return { target: target, transitionEnd: transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n","import { __assign, __read } from 'tslib';\nimport { number, px } from 'style-value-types';\nimport { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.js';\nimport { invariant } from 'hey-listen';\nimport { transformProps } from '../../html/utils/transform.js';\nimport { findDimensionValueType } from '../value-types/dimensions.js';\n\nvar positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nvar isPositionalKey = function (key) { return positionalKeys.has(key); };\nvar hasPositionalKey = function (target) {\n    return Object.keys(target).some(isPositionalKey);\n};\nvar setAndResetVelocity = function (value, to) {\n    // Looks odd but setting it twice doesn't render, it'll just\n    // set both prev and current to the latest value\n    value.set(to, false);\n    value.set(to);\n};\nvar isNumOrPxType = function (v) {\n    return v === number || v === px;\n};\nvar BoundingBoxDimension;\n(function (BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nvar getPosFromMatrix = function (matrix, pos) {\n    return parseFloat(matrix.split(\", \")[pos]);\n};\nvar getTranslateFromMatrix = function (pos2, pos3) { return function (_bbox, _a) {\n    var transform = _a.transform;\n    if (transform === \"none\" || !transform)\n        return 0;\n    var matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        var matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n}; };\nvar transformKeys = new Set([\"x\", \"y\", \"z\"]);\nvar nonTranslationalTransformKeys = transformProps.filter(function (key) { return !transformKeys.has(key); });\nfunction removeNonTranslationalTransform(visualElement) {\n    var removedTransforms = [];\n    nonTranslationalTransformKeys.forEach(function (key) {\n        var value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.syncRender();\n    return removedTransforms;\n}\nvar positionalValues = {\n    // Dimensions\n    width: function (_a) {\n        var x = _a.x;\n        return x.max - x.min;\n    },\n    height: function (_a) {\n        var y = _a.y;\n        return y.max - y.min;\n    },\n    top: function (_bbox, _a) {\n        var top = _a.top;\n        return parseFloat(top);\n    },\n    left: function (_bbox, _a) {\n        var left = _a.left;\n        return parseFloat(left);\n    },\n    bottom: function (_a, _b) {\n        var y = _a.y;\n        var top = _b.top;\n        return parseFloat(top) + (y.max - y.min);\n    },\n    right: function (_a, _b) {\n        var x = _a.x;\n        var left = _b.left;\n        return parseFloat(left) + (x.max - x.min);\n    },\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nvar convertChangedValueTypes = function (target, visualElement, changedKeys) {\n    var originBbox = visualElement.measureViewportBox();\n    var element = visualElement.getInstance();\n    var elementComputedStyle = getComputedStyle(element);\n    var display = elementComputedStyle.display, top = elementComputedStyle.top, left = elementComputedStyle.left, bottom = elementComputedStyle.bottom, right = elementComputedStyle.right, transform = elementComputedStyle.transform;\n    var originComputedStyle = { top: top, left: left, bottom: bottom, right: right, transform: transform };\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.syncRender();\n    var targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach(function (key) {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        var value = visualElement.getValue(key);\n        setAndResetVelocity(value, positionalValues[key](originBbox, originComputedStyle));\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nvar checkAndConvertChangedValueTypes = function (visualElement, target, origin, transitionEnd) {\n    if (origin === void 0) { origin = {}; }\n    if (transitionEnd === void 0) { transitionEnd = {}; }\n    target = __assign({}, target);\n    transitionEnd = __assign({}, transitionEnd);\n    var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    var removedTransformValues = [];\n    var hasAttemptedToRemoveTransformValues = false;\n    var changedValueTypeKeys = [];\n    targetPositionalKeys.forEach(function (key) {\n        var value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        var from = origin[key];\n        var to = target[key];\n        var fromType = findDimensionValueType(from);\n        var toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            var numKeyframes = to.length;\n            for (var i = to[0] === null ? 1 : 0; i < numKeyframes; i++) {\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                var current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues = removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                setAndResetVelocity(value, to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        var convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(function (_a) {\n                var _b = __read(_a, 2), key = _b[0], value = _b[1];\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.syncRender();\n        return { target: convertedTarget, transitionEnd: transitionEnd };\n    }\n    else {\n        return { target: target, transitionEnd: transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target: target, transitionEnd: transitionEnd };\n}\n\nexport { BoundingBoxDimension, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.js';\nimport { unitConversion } from './unit-conversion.js';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nvar parseDomVariant = function (visualElement, target, origin, transitionEnd) {\n    var resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","import { __rest, __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.js';\nimport { getBoundingBox } from '../dom/projection/measure.js';\nimport { buildHTMLStyles } from './utils/build-styles.js';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.js';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.js';\nimport { isTransformProp } from './utils/transform.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { renderHTML } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from './utils/build-projection-transform.js';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nvar htmlConfig = {\n    treeType: \"dom\",\n    readValueFromInstance: function (domElement, key) {\n        if (isTransformProp(key)) {\n            var defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            var computedStyle = getComputedStyle(domElement);\n            return ((isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0);\n        }\n    },\n    sortNodePosition: function (a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    },\n    getBaseTarget: function (props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    },\n    measureViewportBox: function (element, _a) {\n        var transformPagePoint = _a.transformPagePoint;\n        return getBoundingBox(element, transformPagePoint);\n    },\n    /**\n     * Reset the transform on the current Element. This is called as part\n     * of a batched process across the entire layout tree. To remove this write\n     * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n     * works\n     */\n    resetTransform: function (element, domElement, props) {\n        var transformTemplate = props.transformTemplate;\n        domElement.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        // Ensure that whatever happens next, we restore our transform on the next frame\n        element.scheduleRender();\n    },\n    restoreTransform: function (instance, mutableState) {\n        instance.style.transform = mutableState.style.transform;\n    },\n    removeValueFromRenderState: function (key, _a) {\n        var vars = _a.vars, style = _a.style;\n        delete vars[key];\n        delete style[key];\n    },\n    /**\n     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n     * can be animated by Motion.\n     */\n    makeTargetAnimatable: function (element, _a, _b, isMounted) {\n        var transformValues = _b.transformValues;\n        if (isMounted === void 0) { isMounted = true; }\n        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, [\"transition\", \"transitionEnd\"]);\n        var origin = getOrigin(target, transition || {}, element);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(element, target, origin);\n            var parsed = parseDomVariant(element, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return __assign({ transition: transition,\n            transitionEnd: transitionEnd }, target);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (element, renderState, latestValues, projection, layoutState, options, props) {\n        if (element.isVisible !== undefined) {\n            renderState.style.visibility = element.isVisible\n                ? \"visible\"\n                : \"hidden\";\n        }\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n        buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\n            ? buildLayoutProjectionTransformOrigin\n            : undefined);\n    },\n    render: renderHTML,\n};\nvar htmlVisualElement = visualElement(htmlConfig);\n\nexport { getComputedStyle, htmlConfig, htmlVisualElement };\n","import { convertBoundingBoxToAxisBox, transformBoundingBox } from '../../../utils/geometry/index.js';\n\n/**\n * Measure and return the element bounding box.\n *\n * We convert the box into an AxisBox2D to make it easier to work with each axis\n * individually and programmatically.\n *\n * This function optionally accepts a transformPagePoint function which allows us to compensate\n * for, for instance, measuring the element within a scaled plane like a Framer devivce preview component.\n */\nfunction getBoundingBox(element, transformPagePoint) {\n    var box = element.getBoundingClientRect();\n    return convertBoundingBoxToAxisBox(transformBoundingBox(box, transformPagePoint));\n}\n\nexport { getBoundingBox };\n","import { __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { htmlConfig } from '../html/visual-element.js';\nimport { buildSVGAttrs } from './utils/build-attrs.js';\nimport { camelToDash } from '../dom/utils/camel-to-dash.js';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.js';\nimport { isTransformProp } from '../html/utils/transform.js';\nimport { renderSVG } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from '../html/utils/build-projection-transform.js';\n\nvar svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { getBaseTarget: function (props, key) {\n        return props[key];\n    },\n    readValueFromInstance: function (domElement, key) {\n        var _a;\n        if (isTransformProp(key)) {\n            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return domElement.getAttribute(key);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (_element, renderState, latestValues, projection, layoutState, options, props) {\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n        buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\n            ? buildLayoutProjectionTransformOrigin\n            : undefined);\n    }, render: renderSVG }));\n\nexport { svgVisualElement };\n","import { __assign } from 'tslib';\nimport { animations } from '../../motion/features/animations.js';\nimport { gestureAnimations } from '../../motion/features/gestures.js';\nimport { createDomVisualElement } from './create-visual-element.js';\n\n/**\n * @public\n */\nvar domAnimation = __assign(__assign({ renderer: createDomVisualElement }, animations), gestureAnimations);\n\nexport { domAnimation };\n","import { htmlVisualElement } from '../html/visual-element.js';\nimport { svgVisualElement } from '../svg/visual-element.js';\nimport { isSVGComponent } from './utils/is-svg-component.js';\n\nvar createDomVisualElement = function (Component, options) {\n    return isSVGComponent(Component)\n        ? svgVisualElement(options, { enableHardwareAcceleration: false })\n        : htmlVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n"],"sourceRoot":""}